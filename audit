H-1 Contract Insolvency Risk During Reward Claiming in `claimSingleReward()`

## Vulnerability Details

The contract faces insolvency during the reward claiming process when multiple users claim high-value rewards like Silver (0.5 ether) or Gold (1 ether). The contractâ€™s initial balance is only 0.1 ether from the constructor, and users only deposit 0.1 ether when buying boxes. If multiple high-tier rewards are claimed, the contract may not have sufficient funds to pay out all rewards, leading to failed transactions.

## Impact

The contract runs out of ether when multiple users claim high-value rewards, causing failed reward payouts.
Users are unable to withdraw their rewards, leading to contract failure and a loss of trust.

## Tools Used

Unit test

## POC

Add this code to your test suite:

```javascript
    function testPlayerCanClaim() public {
        //
        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint r = mysteryBox.openBox();
        console2.log("REWARD:", r);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint a = mysteryBox.openBox();
        console2.log("REWARD:", a);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint b = mysteryBox.openBox();
        console2.log("REWARD:", b);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint c = mysteryBox.openBox();
        console2.log("REWARD:", c);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint q = mysteryBox.openBox();
        console2.log("REWARD:", q);
        mysteryBox.claimSingleReward(2);
        //
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint w = mysteryBox.openBox();
        console2.log("REWARD:", w);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint t = mysteryBox.openBox();
        console2.log("REWARD:", t);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user4);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint y = mysteryBox.openBox();
        console2.log("REWARD:", y);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user4);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint f = mysteryBox.openBox();
        console2.log("REWARD:", f);
        mysteryBox.claimSingleReward(1);

        assertEq(mysteryBox.getBalance(), 0.8 ether);
        assertEq(user3.balance, 1 ether);
    }
```

## Recommendations

Maintain a Reserve Fund: Ensure the contract has enough ether to cover all potential rewards before users can claim.
Adjust Reward Values: Align reward values with the deposits made by users to avoid excessive payouts.
Implement a Prize Pool: Accumulate funds from multiple users before allowing large payouts to ensure solvency.

H-2 Overlapping Reward Tier Vulnerability in `openBox()` Function leads to incorrect reward assignment.

## Summary

An issue was identified at the `openBox()` function where the reward tiers were overlapping, specifically between the Bronze and Silver rewards. This overlap caused unpredictable behavior in determining the correct reward for certain random values, leading to potential inconsistencies.

## Vulnerability Details

The logic used to determine the rewards based on a random number generated between 0 and 99 had overlapping conditions for the Bronze and Silver tiers:

- Bronze Coin: Expected range was 75-94.
- Silver Coin: Expected range was 95-98.
  However, the condition for Silver Coin (randomValue < 99) could have included values that were already part of the Bronze Coin tier, leading to incorrect assignment of rewards.

## Impact

Incorrect Reward Assignment: Users expecting a reward within the Bronze or Silver range may have received the wrong reward due to the overlap.
Potential Exploitation: In cases where rewards carry different values (e.g., higher-valued Silver Coin), users could exploit the overlap to increase their chances of getting more valuable rewards.

## Tools Used

Manual Review and Unit tests

## Recommendations

To resolve the issue, the conditions for each reward tier at the `openBox` function must be adjusted so that they are mutually exclusive.
Specifically:

- Bronze Coin: Adjust the range to randomValue >= 75 && randomValue < 95.
- Silver Coin: Adjust the range to randomValue >= 95 && randomValue < 99.
  This ensures that all random values fall into distinct reward categories, preventing overlaps and ensuring correct reward assignment.

At the `openBox` function, replace the code with this:

```javascript
function openBox() public {
    require(boxesOwned[msg.sender] > 0, "No boxes to open");

    // Generate a random number between 0 and 99
    uint256 randomValue = uint256(
        keccak256(abi.encodePacked(block.timestamp, msg.sender))
    ) % 100;

    // Determine the reward based on probability
    if (randomValue < 75) {
        // 75% chance to get Coal (0-74)
        rewardsOwned[msg.sender].push(Reward("Coal", 0 ether));
  -  } else if (randomValue < 95)
  +  } else if (randomValue >= 75 && randomValue < 95) {
        // 20% chance to get Bronze Coin (75-94)
        rewardsOwned[msg.sender].push(Reward("Bronze Coin", 0.1 ether));
  -    else if (randomValue < 99) {
  +  } else if (randomValue >= 95 && randomValue < 99) {
        // 4% chance to get Silver Coin (95-98)
        rewardsOwned[msg.sender].push(Reward("Silver Coin", 0.5 ether));
    } else {
        // 1% chance to get Gold Coin (99)
        rewardsOwned[msg.sender].push(Reward("Gold Coin", 1 ether));
    }

    // Decrease the number of boxes owned by the sender
    boxesOwned[msg.sender] -= 1;
}
```

H-3 Anyone can change the owner address allowing funds to be stolen

## Summary

The MysteryBox contract contains a critical vulnerability that allows a malicious user to steal all funds stored in the contract. This is possible due to the lack of restrictions on the `changeOwner` function, enabling an attacker to change the contract's ownership and withdraw all ether.

## Vulnerability Details

Ownership Transfer: The changeOwner function can be called by any user, not just the current owner, to transfer ownership of the contract. This lack of access control allows unauthorized changes in ownership.

Fund Withdrawal: The withdrawFunds function allows the current owner to withdraw all ether from the contract. Since ownership can be transferred without restriction, a malicious user can exploit this to withdraw funds after changing ownership.

## Impact

An attacker can exploit this vulnerability to:

Change Ownership: Transfer contract ownership to their address using the changeOwner function.
Withdraw Funds: Call the withdrawFunds function to withdraw all ether from the contract after acquiring ownership.
This results in the loss of all funds stored in the contract,

## Tools Used

Unit Test

## POC:

Add this to your test suit

```javascript
function testStealFunds() public {
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();

        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        mysteryBox.changeOwner(user1);
        mysteryBox.withdrawFunds();
        vm.stopPrank();

        assertEq(mysteryBox.getBalance(), 0);
    }
```

## Recommendations

Add a check/an onlyOwner modifier that checks if the address calling `changeOwner` is only made by the contract owner.

M-1 Insecure Randomness Generation Vulnerability using block.timestamp and msg.sender affects the fairness and reliability of Mystery Box

## Summary

The code generates a pseudo-random number using block.timestamp and msg.sender, but this approach is not secure for scenarios requiring unpredictable randomness. The inputs used can be influenced by miners or participants, making the randomness predictable.

## Vulnerability Details

The current implementation for generating randomness uses the keccak256 function with block.timestamp and msg.sender as inputs. While this might suffice for non-critical randomness needs, both block.timestamp and msg.sender are not truly random and can be influenced. For example:

- Miners can manipulate the block timestamp within a limited range.
- Malicious users can attempt to generate transactions at specific times, altering the msg.sender input.
  This can lead to predictable outcomes in applications requiring strong randomness, such as lotteries or games, where fairness and unpredictability are critical.

## Impact

- Potential manipulation of outcomes in lotteries, raffles, or any application that depends on fair randomness.
- Exploitation by malicious actors to tilt the results in their favor.

## Tools Used

Manual Review

## Recommendations

For stronger and more secure randomness, consider integrating a Verifiable Randomness mechanism like Chainlink VRF (Verifiable Random Function). Chainlink VRF provides cryptographically secure and verifiable randomness that is resistant to manipulation, ensuring the fairness and unpredictability of outcomes in critical applications.

H-5 Inconsistent Randomness in `openBox()` function Leads to Repeated Rewards when transacted at the same block

## Summary

The openBox function generates repeated rewards due to the reliance on block.timestamp and msg.sender for randomness.

## Vulnerability Details

Block Timestamp Dependency: Transactions occurring within the same block share identical block.timestamp values, reducing the randomness of reward allocation.

User Address Influence: Utilizing msg.sender in the randomness calculation can lead to repeated rewards for users executing multiple transactions in a single block.

This design flaw allows users to exploit the openBox() function, potentially receiving the same reward multiple times when transacting within the same block.

The current code snippet is as follows:

```javascript
uint256 randomValue = uint256(
    keccak256(abi.encodePacked(block.timestamp, msg.sender))
) % 100;
```

Since block.timestamp only updates with each new block and msg.sender remains constant for the same user, transactions that happen within the same block can produce identical random values. This can lead to users receiving the same reward multiple times.

## Impact

The predictable nature of the random number generation results in users receiving the same rewards if they interact with the contract multiple times within the same block. This undermines the intended randomness of the reward distribution and could allow certain malicious users to manipulate the system to their favor.
Economic Impact: Repeated rewards of high tier rewards can distort the economic model of the application, affecting sustainability.

## Tools Used

Unit testing with Forge

## POC

Add this code to your test suite:

```javascript
    function testPlayerCanClaim() public {
        //
        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint r = mysteryBox.openBox();
        console2.log("REWARD:", r);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint a = mysteryBox.openBox();
        console2.log("REWARD:", a);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint b = mysteryBox.openBox();
        console2.log("REWARD:", b);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint c = mysteryBox.openBox();
        console2.log("REWARD:", c);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint q = mysteryBox.openBox();
        console2.log("REWARD:", q);
        mysteryBox.claimSingleReward(2);
        //
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint w = mysteryBox.openBox();
        console2.log("REWARD:", w);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint t = mysteryBox.openBox();
        console2.log("REWARD:", t);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user4);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint y = mysteryBox.openBox();
        console2.log("REWARD:", y);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user4);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint f = mysteryBox.openBox();
        console2.log("REWARD:", f);
        mysteryBox.claimSingleReward(1);

        assertEq(mysteryBox.getBalance(), 0.8 ether);
        assertEq(user3.balance, 1 ether);
    }
```

## Recommendations

Secure Randomness Source: Implement a verifiable randomness source like Chainlink VRF to ensure reliable randomness.

Incorporate Additional Variables: Use other variables (e.g., nonce) in the randomness calculation to ensure diverse rewards.

Transaction Frequency Limitation: Limit the number of times a user can call openBox() within a block to prevent exploitation.

Implement a Delay Mechanism: Introduce a cooldown period to restrict rapid successive calls to the openBox() function.

M-3 Users cannot buy multiple boxes at once; they must complete separate transactions.

## Summary

The current functionality requires users to make individual transactions for each box they wish to purchase, which is inefficient and cumbersome.

## Vulnerability Details

The current functionality requires users to make individual transactions for each box they wish to purchase.

## Impact

Inefficient and cumbersome for users.

## Tools Used

Manual review

## Recommendations

Implement functionality that allows users to buy multiple boxes in a single transaction.
Update the `buyBox()` function to accept a quantity parameter for the number of boxes.
Adjust the user interface to let users select the number of boxes they want before completing the purchase.

H-4 Loss of rewards when a user claims all rewards before opening some.

## Summary

Inadvertent Loss of Unopened Rewards(boxes) in `claimAllRewards()` Function

## Vulnerability Details

Type: Logic Error
Affected Function: `claimAllRewards()`
Description: The function aggregates the total value of rewards, transferring it to the user and deleting all rewards in the rewardsOwned array. This includes unopened rewards, which are inadvertently lost if the user forgets to open them first.

## Impact

Users may lose valuable unopened rewards if they claim all rewards without opening their boxes first, leading to a total loss of funds.

## Tools Used

Unit tests

## POC

User 2 should receive 1.5 ether (His total balance should be 2.2 ether), but instead gets 1 ether, and his `rewardsOwned` mapping gets deleted.
Add this to your test suite.

````javascript
  function testPlayerCanClaimRewards() public {
        //
        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint r = mysteryBox.openBox();
        console2.log("REWARD:", r);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user1);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint a = mysteryBox.openBox();
        console2.log("REWARD:", a);
        mysteryBox.claimSingleReward(1);
        MysteryBox.Reward[] memory aa = mysteryBox.getRewards(user1);
        //
        vm.startPrank(user2);
        mysteryBox.buyBox{value: 0.1 ether}(); //silver reward 1
        uint b = mysteryBox.openBox();
        console2.log("REWARD:", b);
        //
        mysteryBox.buyBox{value: 0.1 ether}(); //silver reward 2
        uint c = mysteryBox.openBox();
        console2.log("REWARD:", c);
        mysteryBox.buyBox{value: 0.1 ether}();//silver reward 3. not opened
        mysteryBox.claimAllRewards();
        MysteryBox.Reward[] memory rew = mysteryBox.getRewards(user2);

        //
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint w = mysteryBox.openBox();
        console2.log("REWARD:", w);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user3);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint t = mysteryBox.openBox();
        console2.log("REWARD:", t);
        mysteryBox.claimSingleReward(1);
        //
        vm.startPrank(user4);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint y = mysteryBox.openBox();
        console2.log("REWARD:", y);
        mysteryBox.claimSingleReward(0);
        //
        vm.startPrank(user4);
        mysteryBox.buyBox{value: 0.1 ether}();
        uint f = mysteryBox.openBox();
        console2.log("REWARD:", f);
        mysteryBox.claimSingleReward(1);

        //  assertEq(mysteryBox.getBalance(), 19.9 ether);
        assertEq(user3.balance, 0.8 ether);
 >>>       assertEq(user2.balance, 1.7 ether);
        assertEq(user1.balance, 0.8 ether);
        assertEq(rew.length, 0);
        assertEq(aa.length, 2);
    } ```

## Recommendations
Invoke openBox Automatically: Modify the buyBox function to automatically call the openBox function after purchasing a box. This ensures that users immediately open their rewards upon buying, reducing the likelihood of forgetting to do so later.


````
